### 游戏背景
本游戏是一个交互式的税收福利分析工具，旨在帮助用户理解税收对市场均衡和社会福利的影响。
通过调整供需弹性以及税率，用户可以直观地观察到税收如何改变市场均衡价格和数量，以及如何影响消费者剩余、生产者剩余、税收收入、总福利和无谓损失。

### 经济学原理
供需曲线：需求曲线表示在不同价格下消费者愿意购买的数量，供给曲线表示在不同价格下生产者愿意提供的数量。
市场均衡：在没有税收的情况下，市场在供需曲线的交点处达到均衡。
税收效应：当征收从量税（每单位商品征收固定税额）时，供给曲线向上移动（移动幅度等于税额），导致均衡数量减少，消费者支付的价格上升，生产者得到的价格下降。
社会福利分析：
消费者剩余（CS）：消费者愿意支付的价格与实际支付价格之间的差额。
生产者剩余（PS）：生产者实际得到的价格与愿意接受的价格之间的差额。
税收收入：政府征收的税额乘以交易量。
总福利：消费者剩余、生产者剩余和税收收入之和。
无谓损失（DWL）：由于税收导致交易量减少而损失的社会福利。

### 核心玩法
用户可以通过三个滑块调整参数：
税率（Tax Rate）：调整每单位商品的税额（0到10之间）
需求弹性（Demand Elasticity）：调整需求曲线的弹性（-5.0到-0.5，负值表示需求向下倾斜）
供给弹性（Supply Elasticity）：调整供给曲线的弹性（0.5到5.0）

### 机制说明
参数调整：
税率滑块：调整税收水平（0-10）
需求弹性滑块：调整需求弹性（-5.0至-0.5）
供给弹性滑块：调整供给弹性（0.5至5.0）
实时反馈：
图表动态更新供需曲线和均衡点
福利柱状图实时显示各项指标变化
数据表格精确显示各项数值
重置功能：
点击"Reset Market"按钮恢复初始设置

### 操作说明
主界面分为三个区域：
左上：供需曲线图（蓝色为需求曲线，红色为供给曲线）
左下：福利分析柱状图
右侧：控制面板和福利指标表格
调整参数：
拖动滑块改变税率、需求弹性或供给弹性
观察图表和表格的实时变化
特殊功能：
黄色点为市场均衡点，显示当前价格和数量
红色虚线为含税供给曲线
点击"Reset Market"恢复初始设置

### 代码结构
模块划分
MarketSimulator类：市场模拟核心逻辑
create_interactive_game函数：创建交互界面
主程序：启动游戏

关键代码功能
1. MarketSimulator类
class MarketSimulator:
    def __init__(self):  # 初始化市场参数
    def update_curves(self):  # 更新供需曲线
    def find_equilibrium(self):  # 计算市场均衡
    def calculate_welfare(self):  # 计算福利指标
2. 可视化组件
fig = plt.figure(figsize=(12, 8))
gs = gridspec.GridSpec(2, 2, height_ratios=[3, 1], width_ratios=[3, 1]) # 创建图表布局
ax = plt.subplot(gs[0, 0]) # 供需曲线图
ax2 = plt.subplot(gs[1, 0]) # 福利分析图
ax_controls = plt.subplot(gs[0:2, 1]) # 控制面板
3. 交互控件
tax_slider = Slider(ax=tax_ax, label='Tax Rate', ...) # 税率滑块
demand_elasticity_slider = Slider(ax=demand_ax, ...)
supply_elasticity_slider = Slider(ax=supply_ax, ...) # 弹性滑块
reset_button = Button(reset_ax, 'Reset Market', ...) # 重置按钮
4. 回调函数
def update(val):  # 处理参数变化
def update_elasticity_and_chart(val):  # 更新弹性值
def reset(event):  # 重置市场

使用的外部库
NumPy：数值计算核心库
Matplotlib：
1.pyplot：创建图表和可视化
2.gridspec：复杂布局管理
3.widgets：创建交互控件（滑块、按钮）

### 扩展方向
增加更多政策工具（如补贴、价格管制）
添加历史记录功能，比较不同政策效果
引入外部性分析
增加不同市场结构（垄断、寡头等）
